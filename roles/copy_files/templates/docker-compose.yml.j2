services:
{% if traefik.enabled %}
  traefik:
    image: "traefik:v3.0"
    container_name: "traefik"
    hostname: traefik
    restart: unless-stopped
    command:
      #- "--log.level=DEBUG"
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
{% if traefik.secure == 'true' %}
      # {{ traefik.secure }}
      - "--entryPoints.websecure.address=:443"
      - "--certificatesresolvers.myresolver.acme.tlschallenge=true"
      #- "--certificatesresolvers.myresolver.acme.caserver=https://acme-staging-v02.api.letsencrypt.org/directory"
      - "--certificatesresolvers.myresolver.acme.email={{ traefik.postmaster }}"
      - "--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json"
{% else %}
      - "--entryPoints.web.address=:80"
{% endif %}
    ports:
{% if traefik.secure == 'true' %}
      - 443:443
{% else %}
      - 80:80
{% endif %}
{% if traefik.expose %}
      - 8080:8080
{% endif %}
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
{% if traefik.secure %}
      - "./letsencrypt:/letsencrypt"
{% endif %}
    networks:
      - eduwallet_agent
{% endif %}

  agent:
    build:
      dockerfile: "{{ docker.dir }}/agent/Dockerfile"
    hostname: agent
    environment:
      - CONF_PATH=conf
      - DB_TYPE=postgres
      - DB_HOST=db
      - DB_USER={{ database.user }}
      - DB_PASSWORD={{ database.password }}
      - DB_NAME={{ database.name }}
      - DB_SCHEMA={{ agent.schema }}
      - DB_ENCRYPTION_KEY={{ agent.dbkey }}
      - PORT={{ agent.port }}
      - LISTEN_ADDRESS=0.0.0.0
      - BASEURL={{ protocol }}://{{ agent.hostname }}
      - LOG_SERVICE=http://log:5080/api/default/issuer/_json
      - LOG_USER={{ (openobserver.adminEmail + ':' + openobserver.adminPassword) | b64encode }}
      - DEBUG=*
    volumes:
      - "{{ agent.dir }}:/opt/app"
    ports:
      - {{ agent.port }}:5000
    restart: unless-stopped
    networks:
      - eduwallet_agent
    links:
      - "db:db"
      - "log:log"
{% if traefik.enabled %}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.agent.rule=Host(`{{ basedomain }}`)"
{% if traefik.secure == 'true' %}
      - "traefik.http.routers.agent.entrypoints=websecure"
      - "traefik.http.routers.agent.tls.certresolver=myresolver"
{% else %}
      - "traefik.http.routers.agent.entrypoints=web"
{% endif %}
{% for tag in agent.extra_docker_compose_labels %}
      - "{{ tag }}"
{% endfor %}
{% endif %}

{% if enableverifier %}
  verifier:
    build:
      dockerfile: "{{ docker.dir }}/verifier/Dockerfile"
    hostname: verifier
    volumes:
      - "{{ verifier.dir }}:/opt/app"
    ports:
      - {{ verifier.port }}:5002
    restart: unless-stopped
    networks:
      - eduwallet_agent
    links:
      - "db:db"
      - "log:log"
{% if traefik.enabled %}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.verifier.rule=Host(`{{ verifierdomain }})"
{% if traefik.secure == 'true' %}
      - "traefik.http.routers.verifier.entrypoints=websecure"
      - "traefik.http.routers.verifier.tls.certresolver=myresolver"
{% else %}
      - "traefik.http.routers.verifier.entrypoints=web"
{% endif %}
{%- for tag in agent.extra_docker_compose_labels %}
      - "{{ tag }}"
{%- endfor %}
{% endif %}
{% endif %}

{% if verifierdeploy and verifierdeploy.install %}
{% for installation in verifierdeploy.installations %}
  {{ installation.name }}:
    build:
      dockerfile: "{{ verifierdeploy.dir }}/{{ installation.path }}/docker/Dockerfile"
    hostname: {{ installation.name }}
    volumes:
      - "{{ verifierdeploy.dir }}/{{ installation.path }}/app:/var/www/html"
    ports:
      - {{ installation.port }}:80
    restart: unless-stopped
    networks:
      - eduwallet_agent
{% if traefik.enabled %}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.{{ installation.name }}.rule=Host(`{{ installation.domain }}`)"
{% if traefik.secure == 'true' %}
      - "traefik.http.routers.{{ installation.name }}.entrypoints=websecure"
      - "traefik.http.routers.{{ installation.name }}.tls.certresolver=myresolver"
{% else %}
      - "traefik.http.routers.{{ installation.name }}.entrypoints=web"
{% endif %}
{% endif %}
{% endfor %}
{% endif %}

{% if statuslists and statuslists.install %}
  statuslist:
    build:
      dockerfile: "{{ statuslists.dir }}/docker/Dockerfile"
    hostname: statuslist
    volumes:
      - "{{ statuslists.dir }}:/opt/app"
    restart: unless-stopped
    links:
      - "db:db"
    ports:
      - 7001:80
    networks:
      - eduwallet_agent
{% if traefik.enabled %}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.statuslist.rule=Host(`{{ statuslists.domain }}`)"
{% if traefik.secure == 'true' %}
      - "traefik.http.routers.statuslist.entrypoints=websecure"
      - "traefik.http.routers.statuslist.tls.certresolver=myresolver"
{% else %}
      - "traefik.http.routers.statuslist.entrypoints=web"
{% endif %}
{% endif %}
{% endif %}

  db:
    image: postgres:16-bookworm
    hostname: db
    restart: unless-stopped
    shm_size: 128mb
    environment:
      - POSTGRES_DB={{ database.name }}
      - POSTGRES_USER={{ database.user }}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    networks:
      - eduwallet_agent
    ports:
      - {{ database.port }}:5432
    volumes:
      - type: bind
        source: {{ database.dir }}
        target: /var/lib/postgresql/data
      - type: bind
        source: {{ database.scripts }}
        target: /docker-entrypoint-initdb.d
    # no Traefik configuration, the database is not publicly available

  log:
    image: public.ecr.aws/zinclabs/openobserve:latest
    hostname: log
    restart: unless-stopped
    ports:
      - 5080:5080
    networks:
      - eduwallet_agent
    volumes:
      - type: bind
        source: {{ openobserver.datadir }}
        target: /data
    environment:
      - ZO_DATA_DIR=/data
      - ZO_ROOT_USER_EMAIL={{ openobserver.adminEmail }}
      - ZO_ROOT_USER_PASSWORD={{ openobserver.adminPassword }}
      - ZO_INGEST_FLATTEN_LEVEL=1
{% if traefik.enabled %}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.openobserver.rule=Host(`{{ openobserver.hostname }}`)"
{% if traefik.secure == 'true' %}
      - "traefik.http.routers.openobserver.entrypoints=websecure"
      - "traefik.http.routers.openobserver.tls.certresolver=myresolver"
{% else %}
      - "traefik.http.routers.openobserver.entrypoints=web"
{% endif %}
{% endif %}

networks:
  eduwallet_agent:
