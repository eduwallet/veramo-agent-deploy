# For identifying the issuers and signing the credentials, this deployment uses did:web keys
# associated with specific issuer domains, based on the front-end facing application that
# initiates the issuance flow.
# Different configurations can reuse the same did:web, for example if there is a need for two
# different credential metadata configurations (one with pre-auth only, one with authorization_code
# only) that are both linked to the same front-end-facing application.
#
# In theory, all configurations could use the same single did:web key
#
dids:
  - name: mbob
    provider: did:web
    domain: "mbob.{{ deploydomain }}"
  - name: uvh
    provider: did:web
    domain: "uvh.{{ deploydomain }}"
  - name: tun
    provider: did:web
    domain: "tun.{{ deploydomain }}"
  - name: nlgov
    provider: did:web
    domain: "nl.gov.{{ deploydomain }}"
  - name: nbgov
    provider: did:web
    domain: "nb.gov.{{ deploydomain }}"
  - name: epi
    provider: did:web
    domain: "epi.{{ deploydomain }}"
  - name: sandbox
    provider: did:web
    domain: "sandbox.{{ deploydomain }}"
  - name: auth
    provider: did:web
    domain: "agent.{{ deploydomain }}:auth"
    alias: "did:web:auth"

# For identifying the verifiers and signing the authorization requests, we use did:keys
# instead of did:web values. This keeps the verifiers nimble and relocatable without
# having to configure reverse proxies. New verifiers can be easily added regardless of
# the domain name. We only require a name for each key.
# Due to the implementation of did alias retrieval, the name must include the provider!
# The name must also match the key name of the verifier instance (including the provider)
verifier_dids:
  - name: demovp
    alias: did:key:demovpr1
    provider: did:key
    type: "Secp256r1"
  - name: proxy
    alias: did:key:proxyr1
    provider: did:key
    type: "Secp256r1"
  - name: sandbox
    alias: did:key:sandboxr1
    provider: did:key
    type: "Secp256r1"
